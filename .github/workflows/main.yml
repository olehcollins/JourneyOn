name: Journey On – Build, Test, Smoke Test & Deploy

on:
  push:
    branches:
      - main

jobs:
  build-test:
    name: Build & Test
    runs-on: ubuntu-latest
    outputs:
      tests_ok: ${{ steps.test.outcome == 'success' }}
    steps:
      - name: ⏳ Check out repository
        uses: actions/checkout@v3

      - name: 🔧 Set up .NET 9.0
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'

      - name: 📦 Restore & build solution
        run: |
          dotnet restore JourneyOn_Server/JourneyOn_Server.sln
          dotnet build   JourneyOn_Server/JourneyOn_Server.sln \
                         --no-restore --configuration Release

      - name: 🧪 Run unit tests
        id: test
        run: dotnet test JourneyOn_Server/Tests/Tests.csproj \
              --no-build --verbosity normal

  smoke-test:
    name: Smoke Test API
    needs: build-test
    runs-on: ubuntu-latest
    if: needs.build-test.outputs.tests_ok == 'true'
    steps:
      - name: ⏳ Check out repository
        uses: actions/checkout@v3

      - name: 🔧 Set up .NET 9.0
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'

      - name: 📂 Publish API
        run: dotnet publish JourneyOn_Server/API/API.csproj \
              --configuration Release \
              --output ./publish

      - name: ▶️ Start API in background
        run: |
          dotnet ./publish/API.dll --urls http://localhost:5002 &
          echo "Waiting for API to become ready…" && sleep 10

      - name: ✅ Health check
        run: curl --fail http://localhost:5002/weatherforecast

  deploy:
    name: Build Docker image & Deploy to Elastic Beanstalk
    needs: smoke-test
    runs-on: ubuntu-latest
    if: needs.smoke-test.result == 'success'
    steps:
      - name: ⏳ Check out repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag & push Docker image
        env:
          ECR_REGISTRY:   ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
          ECR_REPOSITORY: journeyon-api
        run: |
          IMAGE_TAG=${GITHUB_SHA::8}
          docker build \
            -f JourneyOn_Server/Dockerfile \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            JourneyOn_Server
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Create & zip Dockerrun.aws.json
        run: |
          IMAGE_URI=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/journeyon-api:${GITHUB_SHA::8}
          cat > Dockerrun.aws.json <<EOF
          {
            "AWSEBDockerrunVersion": 1,
            "Image": {
              "Name": "${IMAGE_URI}",
              "Update": "true"
            },
            "Ports": [
              { "ContainerPort": "80" }
            ]
          }
          EOF
          zip -r eb.zip Dockerrun.aws.json

      - name: Upload & deploy to Elastic Beanstalk
        run: |
          aws s3 cp eb.zip s3://$BEANSTALK_S3_BUCKET/eb-$GITHUB_SHA.zip
          aws elasticbeanstalk create-application-version \
            --application-name ${{ secrets.EB_APPLICATION_NAME }} \
            --version-label ${{ github.sha }} \
            --source-bundle S3Bucket=$BEANSTALK_S3_BUCKET,S3Key=eb-$GITHUB_SHA.zip
          aws elasticbeanstalk update-environment \
            --environment-name ${{ secrets.EB_ENVIRONMENT_NAME }} \
            --version-label ${{ github.sha }}
        env:
          BEANSTALK_S3_BUCKET: ${{ secrets.EB_S3_BUCKET }}
