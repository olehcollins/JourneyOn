name: Journey On ‚Äì Build, Test, Smoke Test & Deploy

on:
  push:
    branches:
      - main

jobs:
  build-test:
    name: Build & Test
    runs-on: ubuntu-latest
    outputs:
      tests_ok: ${{ steps.test.outcome == 'success' }}
    steps:
      - name: ‚è≥ Check out repository
        uses: actions/checkout@v3

      - name: üîß Set up .NET 9.0
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'

      - name: üì¶ Restore & build solution
        run: |
          dotnet restore JourneyOn_Server/JourneyOn_Server.sln
          dotnet build   JourneyOn_Server/JourneyOn_Server.sln \
                         --no-restore --configuration Release

      - name: üß™ Run unit tests
        id: test
        run: |
          dotnet test JourneyOn_Server/Tests/Tests.csproj \
            --no-build --verbosity normal \
            --configuration Release

  smoke-test:
    name: Smoke Test API
    needs: build-test
    runs-on: ubuntu-latest
    if: needs.build-test.outputs.tests_ok == 'true'
    steps:
      - name: ‚è≥ Check out repository
        uses: actions/checkout@v3

      - name: üîß Set up .NET 9.0
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'

      - name: üìÇ Publish API
        run: |
          dotnet publish JourneyOn_Server/API/API.csproj \
              --configuration Release \
              --output ./publish

  deploy:
    name: Build Docker image & Deploy to Elastic Beanstalk
    needs: smoke-test
    runs-on: ubuntu-latest
    if: needs.smoke-test.result == 'success'
    env:
      AWS_REGION:      ${{ secrets.AWS_REGION }}
      AWS_ACCESS_KEY:  ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_ACCOUNT_ID:  ${{ secrets.AWS_ACCOUNT_ID }}
      EB_APP_NAME:     ${{ secrets.EB_APPLICATION_NAME }}
      EB_ENV_NAME:     ${{ secrets.EB_ENVIRONMENT_NAME }}
      EB_S3_BUCKET:    ${{ secrets.EB_S3_BUCKET }}
      VERSION_LABEL:   ${{ github.run_number }}-${{ github.sha }}
    steps:
    - name: ‚è≥ Check out repository
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region:            ${{ secrets.AWS_REGION }}

    - name: Log in to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag & push Docker image
      env:
        ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
        ECR_REPOSITORY: journeyon-api
      run: |
        SHORT_SHA=${GITHUB_SHA::8}
        VERSION_LABEL=${GITHUB_RUN_NUMBER}-${SHORT_SHA}
        ECR_URI=${ECR_REGISTRY}/${ECR_REPOSITORY}

        docker build \
          -f JourneyOn_Server/Dockerfile \
          -t ${ECR_URI}:${VERSION_LABEL} \
          JourneyOn_Server
        docker push ${ECR_URI}:${VERSION_LABEL}

    - name: Prepare EB bundle
      run: |
        SHORT_SHA=${GITHUB_SHA::8}
        VERSION_LABEL=${GITHUB_RUN_NUMBER}-${SHORT_SHA}
        ECR_URI=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/journeyon-api
        
        # Populate the template
        cp JourneyOn_Server/Dockerrun.aws.json.template Dockerrun.aws.json
        sed -i "s#__IMAGE_URI__#${ECR_URI}:${VERSION_LABEL}#" Dockerrun.aws.json
        
        # Zip it up for EB as a fresh version
        zip eb-${VERSION_LABEL}.zip Dockerrun.aws.json

    - name: Create application version
      run: |
        SHORT_SHA=${GITHUB_SHA::8}
        VERSION_LABEL=${GITHUB_RUN_NUMBER}-${SHORT_SHA}

        aws s3 cp eb-${VERSION_LABEL}.zip \
          s3://${{ secrets.EB_S3_BUCKET }}/eb-${VERSION_LABEL}.zip

        aws elasticbeanstalk create-application-version \
          --application-name ${{ secrets.EB_APPLICATION_NAME }} \
          --version-label ${VERSION_LABEL} \
          --source-bundle S3Bucket=${{ secrets.EB_S3_BUCKET }},S3Key=eb-${VERSION_LABEL}.zip

    - name: Deploy that version
      run: |
        SHORT_SHA=${GITHUB_SHA::8}
        VERSION_LABEL=${GITHUB_RUN_NUMBER}-${SHORT_SHA}

        aws elasticbeanstalk update-environment \
          --environment-name ${{ secrets.EB_ENVIRONMENT_NAME }} \
          --version-label ${VERSION_LABEL}
          
    - name: Wait for deployment to complete
      run: |
       aws elasticbeanstalk wait environment-updated \
         --region ${{ secrets.AWS_REGION }} \
         --environment-name ${{ secrets.EB_ENV_NAME }}
